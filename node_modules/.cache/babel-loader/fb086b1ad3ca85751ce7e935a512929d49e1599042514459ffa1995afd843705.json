{"ast":null,"code":"import Vue from \"vue\";\nimport VueRouter from 'vue-router';\nimport login from \"../components/LoginPage.vue\";\nimport register from \"../components/RegisterPage.vue\";\nimport index from \"../components/IndexPage.vue\";\nimport projectsBox from \"../components/ProjectsBox.vue\";\nimport projectPage from \"../components/project.vue\";\n//2.使用路由\nVue.use(VueRouter);\n//3.创建VueRouter的实例\nconst router = new VueRouter({\n  //tips:不想要 #（锚点）就添加下面代码\n  mode: 'history',\n  //4.配置路由的path和组件\n  routes: [{\n    path: \"/\",\n    name: 'login',\n    component: login\n  }, {\n    path: \"/login\",\n    name: 'login',\n    component: login\n  }, {\n    path: \"/register\",\n    name: 'register',\n    component: register\n  }, {\n    path: \"/home\",\n    name: 'index',\n    component: index,\n    children: [{\n      path: \"projectsBox\",\n      name: 'projectsBox',\n      component: projectsBox\n    }, {\n      path: \"project\",\n      name: \"project\",\n      component: projectPage\n    }]\n  }]\n});\n\n//获取原型对象上的push函数\nconst originalPush = VueRouter.prototype.push;\n//修改原型对象中的push方法\nVueRouter.prototype.push = function push(location) {\n  return originalPush.call(this, location).catch(err => err);\n};\nrouter.beforeEach((to, from, next) => {\n  const token = window.sessionStorage.getItem('CCNtoken');\n  // 有token\n  if (token) {\n    // 直接放行\n    if (to.path === '/') {\n      next({\n        \"path\": \"/home\"\n      });\n    } else {\n      next();\n    }\n  } else {\n    // 否则是没有\n    // 如果去的是登录页\n    if (to.path === '/login' || to.path === '/register' || to.path === '/home' || to.path === '/home/projectsBox') {\n      // 直接放行\n      next();\n    } else {\n      // 如果去的是其他页,跳转到登录页\n      // Message.error('请登录以后再操作！')\n      // 跳转到登录页\n      return next({\n        \"path\": \"/login\"\n      });\n    }\n  }\n  next();\n});\n// 5.导入路由实例\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","login","register","index","projectsBox","projectPage","use","router","mode","routes","path","name","component","children","originalPush","prototype","push","location","call","catch","err","beforeEach","to","from","next","token","window","sessionStorage","getItem"],"sources":["E:/ST/html/vue/gitccn/src/router/index.js"],"sourcesContent":["\r\nimport Vue from \"vue\";\r\nimport VueRouter from 'vue-router'\r\nimport login from \"../components/LoginPage.vue\";\r\nimport register from \"../components/RegisterPage.vue\";\r\nimport index from \"../components/IndexPage.vue\";\r\nimport projectsBox from \"../components/ProjectsBox.vue\";\r\nimport projectPage from \"../components/project.vue\";\r\n//2.使用路由\r\nVue.use(VueRouter);\r\n//3.创建VueRouter的实例\r\nconst router = new VueRouter({\r\n    //tips:不想要 #（锚点）就添加下面代码\r\n     mode:'history', \r\n    //4.配置路由的path和组件\r\n    routes :[\r\n        {\r\n          path: \"/\",\r\n          name:'login',\r\n          component: login,\r\n        },\r\n        {\r\n          path: \"/login\",\r\n          name:'login',\r\n          component: login,\r\n        },\r\n        {\r\n          path: \"/register\",\r\n          name:'register',\r\n          component: register,\r\n        },\r\n        {\r\n          path: \"/home\",\r\n          name:'index',\r\n          component: index,\r\n          children:[{\r\n            path: \"projectsBox\",\r\n            name:'projectsBox',\r\n            component:projectsBox,\r\n          },\r\n          {\r\n            path:\"project\",\r\n            name:\"project\",\r\n            component:projectPage,\r\n          }]\r\n        },\r\n      ]\r\n});\r\n\r\n//获取原型对象上的push函数\r\nconst originalPush = VueRouter.prototype.push\r\n//修改原型对象中的push方法\r\nVueRouter.prototype.push = function push(location) {\r\n  return originalPush.call(this, location).catch(err => err)\r\n}\r\n\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n  const token = window.sessionStorage.getItem('CCNtoken');\r\n  // 有token\r\n  if (token) {\r\n    // 直接放行\r\n    if(to.path === '/'){\r\n      next({ \"path\": \"/home\" })\r\n    }\r\n    else{\r\n      next();\r\n    }\r\n    \r\n  } else {  // 否则是没有\r\n    // 如果去的是登录页\r\n    if (to.path === '/login' || to.path==='/register' || to.path==='/home' || to.path==='/home/projectsBox') {\r\n      // 直接放行\r\n      next();\r\n    } else {\r\n      // 如果去的是其他页,跳转到登录页\r\n      // Message.error('请登录以后再操作！')\r\n      // 跳转到登录页\r\n      return next({ \"path\": \"/login\" })\r\n    }\r\n  }\r\n  next();\r\n});\r\n// 5.导入路由实例\r\nexport default router\r\n"],"mappings":"AACA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,6BAA6B;AAC/C,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,KAAK,MAAM,6BAA6B;AAC/C,OAAOC,WAAW,MAAM,+BAA+B;AACvD,OAAOC,WAAW,MAAM,2BAA2B;AACnD;AACAN,GAAG,CAACO,GAAG,CAACN,SAAS,CAAC;AAClB;AACA,MAAMO,MAAM,GAAG,IAAIP,SAAS,CAAC;EACzB;EACCQ,IAAI,EAAC,SAAS;EACf;EACAC,MAAM,EAAE,CACJ;IACEC,IAAI,EAAE,GAAG;IACTC,IAAI,EAAC,OAAO;IACZC,SAAS,EAAEX;EACb,CAAC,EACD;IACES,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAC,OAAO;IACZC,SAAS,EAAEX;EACb,CAAC,EACD;IACES,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAC,UAAU;IACfC,SAAS,EAAEV;EACb,CAAC,EACD;IACEQ,IAAI,EAAE,OAAO;IACbC,IAAI,EAAC,OAAO;IACZC,SAAS,EAAET,KAAK;IAChBU,QAAQ,EAAC,CAAC;MACRH,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAC,aAAa;MAClBC,SAAS,EAACR;IACZ,CAAC,EACD;MACEM,IAAI,EAAC,SAAS;MACdC,IAAI,EAAC,SAAS;MACdC,SAAS,EAACP;IACZ,CAAC;EACH,CAAC;AAET,CAAC,CAAC;;AAEF;AACA,MAAMS,YAAY,GAAGd,SAAS,CAACe,SAAS,CAACC,IAAI;AAC7C;AACAhB,SAAS,CAACe,SAAS,CAACC,IAAI,GAAG,SAASA,IAAIA,CAACC,QAAQ,EAAE;EACjD,OAAOH,YAAY,CAACI,IAAI,CAAC,IAAI,EAAED,QAAQ,CAAC,CAACE,KAAK,CAACC,GAAG,IAAIA,GAAG,CAAC;AAC5D,CAAC;AAGDb,MAAM,CAACc,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,KAAK,GAAGC,MAAM,CAACC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;EACvD;EACA,IAAIH,KAAK,EAAE;IACT;IACA,IAAGH,EAAE,CAACZ,IAAI,KAAK,GAAG,EAAC;MACjBc,IAAI,CAAC;QAAE,MAAM,EAAE;MAAQ,CAAC,CAAC;IAC3B,CAAC,MACG;MACFA,IAAI,CAAC,CAAC;IACR;EAEF,CAAC,MAAM;IAAG;IACR;IACA,IAAIF,EAAE,CAACZ,IAAI,KAAK,QAAQ,IAAIY,EAAE,CAACZ,IAAI,KAAG,WAAW,IAAIY,EAAE,CAACZ,IAAI,KAAG,OAAO,IAAIY,EAAE,CAACZ,IAAI,KAAG,mBAAmB,EAAE;MACvG;MACAc,IAAI,CAAC,CAAC;IACR,CAAC,MAAM;MACL;MACA;MACA;MACA,OAAOA,IAAI,CAAC;QAAE,MAAM,EAAE;MAAS,CAAC,CAAC;IACnC;EACF;EACAA,IAAI,CAAC,CAAC;AACR,CAAC,CAAC;AACF;AACA,eAAejB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}